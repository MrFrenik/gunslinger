#ifndef PBR_DEFAULT_H
#define PBR_DEFAULT_H

GS_API_DECL 
gs_gfxt_pipeline_t gs_gfxt_default_pbr_pipeline(void)
{
  const char* pip = "/*\n"
"    TODO(john): Need a description of the .sf format here\n"
"*/\n"
"\n"
"pipeline {\n"
"\n"
"    raster\n"
"    {\n"
"        primitive: TRIANGLES\n"
"        index_buffer_element_size: UINT32\n"
"    },\n"
"\n"
"    depth\n"
"    {\n"
"        func: LESS\n"
"    },\n"
"\n"
"\n"
"    shader {\n"
"\n"
"        vertex {\n"
"\n"
"            attributes {\n"
"\n"
"                /*\n"
"                    Vertex layout required for this pipeline (for input assembler)\n"
"\n"
"                    fields:\n"
"\n"
"                    POSITION: 	      	float3\n"
"                    TEXCOORD: 	      	float2\n"
"                    TEXCOORD[0 - 12]: 	float2\n"
"                    COLOR:    		uint8[4]\n"
"                    NORMAL:   		float3\n"
"                    TANGENT:  		float4\n"
"                    JOINT:    		float4\n"
"                    WEIGHT:   		float\n"
"                    FLOAT: 		float\n"
"                    FLOAT2: 		float2\n"
"                    FLOAT3: 		float3\n"
"                    FLOAT4: 		float4\n"
"                */\n"
"\n"
"                POSITION : a_position\n"
"                TEXCOORD : a_uv\n"
"                COLOR    : a_color\n"
"            },\n"
"\n"
"            uniforms {\n"
"                mat4 u_mvp;\n"
"            },\n"
"\n"
"            out {\n"
"                vec2 uv;\n"
"                vec3 position;\n"
"            },\n"
"\n"
"            code {\n"
"                void main() {\n"
"                    gl_Position = u_mvp * vec4(a_position, 1.0);\n"
"                    uv = a_uv;\n"
"                    position = a_position;\n"
"                }\n"
"            }\n"
"        },\n"
"\n"
"        fragment {\n"
"        \n"
"            uniforms {\n"
"                sampler2D u_base_col_tex;\n"
"                vec4 u_base_col_fact;\n"
"            },\n"
"            \n"
"            out {\n"
"                vec4 frag_color;\n"
"            },\n"
"\n"
"            code {\n"
"                void main() {\n"
"                    frag_color = texture(u_base_col_tex, uv); // //\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"}\n";

  return gs_gfxt_pipeline_load_from_memory_ext(pip, sizeof(pip)-1, NULL);
};
#endif
